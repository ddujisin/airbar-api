// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator python {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = -1
  enable_experimental_decimal = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  LOW_STOCK
  NEW_ORDER
  PAYMENT
  SYSTEM
  RESERVATION
}

enum NotificationChannel {
  websocket
  email
  mobile
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guest {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  phoneNumber  String?
  preferences  Json?         @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
}

model Reservation {
  id         String    @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  pinCode    String    @unique
  status     String    @default("ACTIVE")
  roomNumber String?
  guestId    String
  guest      Guest     @relation(fields: [guestId], references: [id])
  orders     Order[]
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Item {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  qrCode      String      @unique
  description String?
  category    String?
  available   Boolean     @default(true)
  stockLevel  Int         @default(0)
  imageUrl    String?
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  orderItems    OrderItem[]
  totalAmount   Decimal
  status        String      @default("PENDING")
  paymentId     String?
  payment       Payment?    @relation(fields: [paymentId], references: [id])
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String      @id @default(uuid())
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  orders        Order[]
  amount        Decimal
  status        String      @default("PENDING")
  method        String
  transactionId String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model NotificationPreference {
  id                String    @id @default(uuid())
  userId            String    @unique
  channels          Json // Map of NotificationType to array of NotificationChannel
  quietHours        Json? // Optional quiet hours configuration
  enabled           Boolean   @default(true)
  mutedUntil        DateTime?
  priorityThreshold Int       @default(5)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("notification_preferences")
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType
  message    String
  priority   String
  targetUser String?
  metadata   Json?
  read       Boolean          @default(false)
  readAt     DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@map("notifications")
}
