generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  role         String        @default("ADMIN")
  isSuperAdmin Boolean       @default(false)
  name         String?
  phone        String?
  address      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sessions     Session[]
  menuItems    MenuItem[]
  guests       Guest[]
  reservations Reservation[]
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  accessToken String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  available   Boolean     @default(true)
  hostId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  host        User        @relation(fields: [hostId], references: [id])
}

model Guest {
  id           String        @id @default(uuid())
  name         String
  email        String
  hostId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  host         User          @relation(fields: [hostId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  pin       String
  hostId    String
  guestId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  host      User     @relation(fields: [hostId], references: [id])
  guest     Guest    @relation(fields: [guestId], references: [id])
  orders    Order[]
}

model Order {
  id            String      @id @default(uuid())
  reservationId String
  status        String      @default("pending")
  totalPrice    Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}
